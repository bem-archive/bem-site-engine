block('post').mod('view', 'full')(
    content()(function () {
        var data = this.data,
            node = data.node,
            source = node.source[data.req.lang];

        if (!source) {
            console.error('source not found for node %s and locale %s', node.id, data.req.lang);
            return [];
        }

        return [
            apply('date', { ctx: {
                createDate: source.createDate,
                editDate: source.editDate
            } }),

            apply('author', { ctx: {
                authors: source.authors,
                translators: source.translators
            } }),

            apply('categories', { ctx: {
                breadcrumbs: node.breadcrumbs,
                lang: data.lang
            } }),

            apply('title', { 'ctx.content': source }),
            apply('github', { ctx: {
                content: source,
                node: node
            } }),
            apply('deps', { 'ctx.content': source.deps }),
            apply('contentFull', { 'ctx.content': source.content }),
            apply('issue', { 'ctx.content': source.repo })
        ];
    }),

    // authors of post
    mode('author')(function () {
        return {
            elem: 'author',
            authors: this.ctx.authors,
            translators: this.ctx.translators
        };
    }),

    // date of creation and last modification
    mode('date')(function () {
        var ctx = this.ctx,
            createDate = ctx.createDate,
            editDate = ctx.editDate;

        return {
            elem: 'date',
            createDate: createDate,
            editDate: editDate
        };
    }),

    // post categories
    mode('categories')(function () {
        return {
            elem: 'categories',
            breadcrumbs: this.ctx.breadcrumbs,
            lang: this.ctx.lang
        };
    }),

    // post title + tags || link to github
    mode('title')(function () {
        var content = this.ctx.content,
            tags = content.tags;

        if (tags) {
            return {
                elem: 'title-line',
                content: [
                    {
                        elem: 'title',
                        tag: 'h1',
                        content: content.longTitle || content.title
                    },
                    {
                        elem: 'tags',
                        content: tags
                    }
                ]
            };
        }

        return {
            elem: 'title',
            tag: 'h1',
            content: content.longTitle || content.title
        };
    }),

    mode('github')(function () {
        var ctx = this.ctx,
            content = ctx.content,
            url = content.url,
            tags = content.tags,
            routeName = ctx.node.route.name;

        if (routeName === 'index' || tags) {
            return false;
        }

        return {
            elem: 'url',
            content: url
        };
    }),

    // post content
    mode('contentFull')(function () {
        return {
            elem: 'content',
            url: apply('getUrl'),
            content: this.ctx.content
        };
    }),

    mode('issue').match(function () { return this.ctx.content; })(function () {
        var repo = this.ctx.content;

        return {
            elem: 'issue',
            content: [
                {
                    tag: 'span',
                    content: BEM.I18N('post', 'repo-text')
                },
                {
                    block: 'link',
                    url: apply('repoIssue', { 'ctx.content': repo }),
                    content: BEM.I18N('post', 'repo-issue')
                }
            ]
        };
    }),

    mode('repoIssue').match(function () { return this.ctx.content; })(function () {
        var repo = this.ctx.content;

        return repo.issue || '';
    }),

    // library url on github
    mode('url')(function () {
        return {
            elem: 'url',
            content: this.ctx.content
        };
    }),

    // library dependencies
    mode('deps')(function () {
        return {
            elem: 'deps',
            content: this.ctx.content
        };
    }),

    mode('getUrl')(function () {
        var req = this.data.req,
            lang = req.lang === 'en' ? 'ru' : 'en',
            host = req.headers.host,
            path = req._parsedUrl.pathname;

            return 'http://' + lang +
                (host.indexOf(req.lang) === 0 ? host.slice(host.indexOf('.')) : ('.' + host)) + path;
    })
);
