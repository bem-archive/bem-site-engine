block('block-example')(
    def()(function () {
        var enb = this.ctx.builder && this.ctx.builder.enb,
            prefix = this.ctx.prefix,
            example = this.ctx.example,
            bemjson,
            title,
            name,
            url,
            urlBemhtml,
            deps;

        if (enb) {
            var path = (example.url || example.path).replace(/\.(ru|en)/, ''),
                parts = path.split('/'),
                data = this.data,
                lang = data.lang,
                source = data.node.source,
                examplesData = source.data[lang] ? source.data[lang].examples : source.data.examples;

            // get name of example
            name = parts[parts.length - 1];

            // check what data structure
            if (parts[parts.length - 1] === parts[parts.length - 2]) {
                // old structure enb-bem-docs
                url = prefix + '/' + path + '.html';
            } else {
                // new structure enb-bem-docs
                url = prefix + '/' + path + '/' + name + '.html';
                bemjson = prefix + '/' + path + '/' + name + '.bemjson.js';

                // get source bemjson if it inline example
                examplesData.forEach(function (example) {
                    if (example && example.name === name) {
                        example.entityDeps && (deps = example.entityDeps);

                        if (example.source) {
                            bemjson = example.source;
                            urlBemhtml = prefix + '/' + path + '/' + name + '.bemhtml.js';
                        }
                    }
                });
            }
        } else {
            title = example.title;
            url = prefix + '/' + example.url + '.ru.html';
            bemjson = prefix + '/' + example.url + '.bemjson.js';
            name = example.url.replace(/.+\//, '');
        }

        return applyNext({
            _title: title,
            _name: name,
            _url: url,
            _deps: deps,
            _bemjson: bemjson,
            _urlBemhtml: urlBemhtml
        });
    }),

    content()(function () {
        var title = this._title,
            name = this._name,
            url = this._url,
            deps = this._deps,
            ua = req.headers['user-agent'],
            examplesData = this.data.node.source.examplesData,
            exampleData = examplesData && examplesData[this._name];

        return [
            {
                elem: 'header',
                attrs: { id: name },
                content: [
                    {
                        elem: 'anchor',
                        url: '#' + name
                    },
                    {
                        elem: 'blank',
                        url: url,
                        attrs: {
                            target: ua && ua.indexOf('MSIE 8.0') < 0 ? '_blank' : undefined,
                            title: BEM.I18N('block-example', 'examples-title')
                        },
                        content: (title && name) ? title + ' (' + name + ')' : ''
                    },
                    {
                        block: 'dropdown',
                        mods: { switcher: 'link', theme: 'islands', size: 'm' },
                        mix: [
                            {
                                block: 'block-example',
                                elem: 'qr',
                                js: {
                                    url: 'https://disk.yandex.net/qr/?format=svg&text=' +
                                        'http://' + encodeURIComponent(req.headers.host) + url
                                }
                            },
                            { block: 'block-example', elem: 'link' }
                        ],
                        switcher: 'QR',
                        popup: {
                            block: 'image',
                            width: 220
                        }
                    },
                    deps ? {
                        elem: 'source-switcher',
                        elemMods: { type: 'deps' },
                        content: 'deps'
                    } : '',
                    exampleData ? {
                        elem: 'source-switcher',
                        elemMods: { type: 'custom-blocks' },
                        content: 'custom blocks'
                    } : '',
                    {
                        elem: 'source-switcher',
                        elemMods: { type: 'bemjson' },
                        content: 'bemjson'
                    },
                    {
                        elem: 'source-switcher',
                        elemMods: { type: 'html' },
                        js: { urlBemhtml: this._urlBemhtml },
                        content: 'html'
                    }
                ]
            },
            {
                elem: 'source',
                exampleData: exampleData
            },
            {
                elem: 'live-wrap',
                content: [
                    {
                        elem: 'live-spin'
                    },
                    {
                        elem: 'live',
                        url: url
                    }
                ]
            }
        ];
    }),

    elem('source').content()(function () {
        var stringify = require('stringify-object'),
            exampleData = this.ctx.exampleData;

        return [
            this._deps ? {
                elem: 'source-item',
                elemMods: { type: 'deps' },
                content: {
                    elem: 'source-code',
                    elemMods: { view: 'text' },
                    content: stringify(this._deps, { indent: '    ' })
                }
            } : '',
            exampleData ? {
                elem: 'source-item',
                elemMods: { type: 'custom-blocks' },
                content: {
                    block: 'block-example-custom-blocks',
                    content: exampleData
                }
            } : '',
            {
                elem: 'source-item',
                elemMods: { type: 'bemjson' }
            },
            {
                elem: 'source-item',
                elemMods: { type: 'html' },
                content: {
                    elem: 'source-code',
                    elemMods: { view: 'text', type: 'html' },
                    content: ' '
                }
            }
        ];
    }),

    elem('source-item').elemMod('type', 'bemjson')(
        mod('view', 'default').content()(function() {
            return [
                {
                    elem: 'source-code',
                    elemMods: { view: 'iframe' },
                    attrs: { 'data-url': this._bemjson }
                },
                {
                    elem: 'source-copy',
                    js: { urlBemjson: this._bemjson }
                }
            ];
        }),
        mod('view', 'inline').content()(function() {
            return [
                {
                    elem: 'source-code',
                    elemMods: { view: 'text' },
                    content: this.xmlEscape(this._bemjson)
                },
                {
                    elem: 'source-copy',
                    js: { inlineBemjson: this._bemjson }
                }
            ];
        })
    ),

    match(function () { return !this._bemjson; })(
        elem('source-switcher')(
            def()(false)
        ),
        elem('source')(
            def()(false)
        )
    )
);
